# 一、Sass

## 1、概述

1. sass 从第三代开始，放弃了缩进式风格，完全向下兼容普通的 CSS 代码，这一代的 sass 被称为 scss 。

2. 中文教程： [Sass教程 Sass中文文档 | Sass中文网](https://www.sass.hk/docs/) 

3. sass、less 与 stylus 的区别

   1. 编译环境不一样
      1. sass 需要 ruby 环境
      2. less 需要 less.js
      3. stylus 需要 node
   2. 变量符不一样
      1. sass 为 $
      2. less 为 @
      3. stylus 无符号，用赋值语法
   3. 难易程度
      1. less 容易上手
      2. sass、stylus 更为强大

4. 安装

   1. 安装 vsCode 扩展， Live Sass Compiler，并修改 setting.json

      ```javascript
      {
          "liveSassCompile.settings.formats":[{
              /*
              nested:嵌套
              expanded:展开
              compact：紧凑
              compressed：压缩
              */
              "format": "compact",
              "extensionName": ".css",
              "savePath": "~/../css"
          }],
      
          // 排除目录
          "liveSassCompile.settings.excludeList": [
              "**/node_modules/**",
              ".vscode/**"
          ],
          // 是否生成对应的map
          "liveSassCompile.settings.generateMap": true,
          // 是否添加兼容前缀
          "liveSassCompile.settings.autoprefix": [
              "> 1%",
              "last 2 versions"
          ],
          "explorer.confirmDelete": false
      }
      ```

## 2、CSS 功能拓展

### 1）嵌套规则

- Sass 允许将一套 CSS 样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器 

  ```javascript
  #main {
    width: 97%;
    
    p, div {
      font-size: 2em;
      a { font-weight: bold; }
    }
  
    pre { font-size: 3em; }
  }
  
  ---编译为
  
  #main {
    width: 97%; 
  }
  #main p, #main div {
      font-size: 2em; 
  }
  #main p a, #main div a {
      font-weight: bold; 
  }
  #main pre {
      font-size: 3em; 
  }
  ```

### 2）父选择器 `&`

- 当给某个元素设定 `hover` 样式时，或者当 `body` 元素有某个 classname 时，可以用 `&` 代表嵌套规则外层的父选择器。 

  ```javascript
  a {
    font-weight: bold;
    text-decoration: none;
    &:hover { text-decoration: underline; }
    body.firefox & { font-weight: normal; }
  }
  
  ---编译为
  
  a {
    font-weight: bold;
    text-decoration: none; 
  }
  a:hover {
      text-decoration: underline; 
  }
  body.firefox a {
      font-weight: normal; 
  }
  ```

### 3）属性嵌套

- 有些 CSS 属性遵循相同的命名空间 (namespace)，Sass 允许将属性嵌套在命名空间中。

- 命名空间也可以包含自己的属性值。

  ```javascript
  .funky {
    font: 20px/24px {
      family: fantasy;
      weight: bold;
    }
  }
  
  ---编译为
  
  .funky {
    font: 20px/24px;
    font-family: fantasy;
    font-weight: bold; 
  }
  ```

### 4）占位符选择器 `%foo`

- 与常用的 id 与 class 选择器写法相似，只是 `#` 或 `.` 替换成了 `%`。

- 必须通过 [@extend](https://www.sass.hk/docs/#t7-3) 指令调用

  ```javascript
  %color{
      color:#fff
  }
  
  div{
      @extend:%color;
      padding:10px;
  }
  
  ---编译为
  
  // 不生成 %color 的代码
  div{
      color:#fff;
      padding:10px;
  }
  ```

  

## 3、注释 `/* */` 与 `//`

- Sass 支持标准的 CSS 多行注释 `/* */`，以及单行注释 `//`，前者会 被完整输出到编译后的 CSS 文件中，而后者则不会。

- 将 `!` 作为多行注释的第一个字符表示在压缩输出模式下保留这条注释并输出到 CSS 文件中，通常用于添加版权信息。

- 插值语句 (interpolation) 也可写进多行注释中输出变量值。

  ```javascript
  $version: "1.2.3";
  /* This CSS is generated by My Snazzy Framework version #{$version}. */
  
  ---编译为
  
  /* This CSS is generated by My Snazzy Framework version 1.2.3. */
  ```

## 4、SassScript

### 1）变量 `$`

#### （1）CSS 使用变量

```javascript
// 可用于任何选择器，范围相当于 body
:root{
    --color: #F00;
}
p{
    color:var(--color);
}
```

#### （2）Sass 使用变量

- 如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。

  ```javascript
  　$side : left;
  
  　.rounded {
  　　　border-#{$side}-radius: 5px;
  　}
  ```

- 变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 `!global` 声明。

  ```javascript
  #main {
    $width: 5em !global;
    width: $width;
  }
  
  #sidebar {
    width: $width;
  }
  
  ---编译为
  
  #main {
    width: 5em;
  }
  
  #sidebar {
    width: 5em;
  }
  ```

### 2）数据类型

- 支持七种数据类型：数字，字符串，颜色，布尔型，空值，数组list，maps

#### （1）字符串 Strings

- SassScript 支持 CSS 的两种字符串类型：有引号字符串 (quoted strings)，如 `"Lucida Grande"` `'http://sass-lang.com'`；与无引号字符串 (unquoted strings)，如 `sans-serif` `bold`，在编译 CSS 文件时不会改变其类型。

#### （2）数组 Lists

- Sass 列表(List)函数用于处理列表，可以访问列表中的值，向列表添加元素，合并列表等。
- Sass 列表是不可变的，因此在处理列表时，返回的是一个新的列表，而不是在原有的列表上进行修改。
- ==**列表的起始索引值为 1，记住不是0。**==

|       函数       |                             描述                             |
| :--------------: | :----------------------------------------------------------: |
|     append()     |                    将单个值添加到列表尾部                    |
|     index()      |                    返回元素在列表中的索引                    |
|     length()     |                        返回列表的长度                        |
|  is-bracketed()  |                    判断列表中是否有中括号                    |
|      join()      |                         合并两列表，                         |
| list-separator() |              返回一列表的分隔符类型，可以是空格              |
|      nth()       |                       获取第 n 项的值                        |
|    set-nth()     |                 设置列表第 n 项的值为 value                  |
|      zip()       | 将多个列表按照以相同索引值为一组，重新组成一个新的多维度列表 |

##### [1] append() 函数

`append()` 函数可以用于向列表中添加一个新的元素。

其中 `list` 为列表、`value` 为要新增的元素值，`separator` 是可选参数，可以指定[分隔符](https://so.csdn.net/so/search?q=分隔符&spm=1001.2101.3001.7020)，默认为空格，值`comma` 表示使用逗号分隔列表。

```scss
append(list, value, [separator])
```

##### [2] index() 函数

`index()` 函数可以用于返回元素在列表中的索引，注意哟，Sass 中的索引是从 1 开始的。

```scss
$lst:a b c d e;
.one{
    content: index($lst, a);
}
.two{
    content: index($lst, d);
}
---编译为
.one {
  content: 1;
}
.two {
  content: 4;
}
```

##### [3] length() 函数

`length()` 函数可以获取列表的长度。

```scss
$lst1:a b c d e;
$lst2:10 15 21 36 17 6 18;
.one{
    content: length($lst1);
}
.two{
    content: length($lst2);
}
---编译为
.one {
  content: 5;
}
.two {
  content: 7;
}
```

##### [4] is-bracketed() 函数

`is-bracketed()` 函数用于判断列表中是否有中括号。如果有中括号则返回 `true`，如果没有中括号则返回 `false`。

```scss
.one{
    content: is-bracketed([a b c]);
}
.two{
    content: is-bracketed(xkd summer iven);
}
---编译为
.one {
  content: true;
}
.two {
  content: false;
}
```

##### [5] join() 函数

`join()` 函数用于合并两个列表。函数中带有四个参数，前面两个参数为要合并的列表，将第二个参数添加到第一个参数末尾。后两个是可选参数，第三个参数为指定分隔符，第四个参数为判断是否有中括号，可以设置为 `true` 或 `false` 两个值。

```scss
$lst1: a b c;
$lst2: 1 2 3;
.one{
    content: join($lst1, $lst2, comma);
}
.two{
    content: join($lst1, $lst2);
}
---编译为
.one {
  content: a, b, c, 1, 2, 3;
}
.two {
  content: a b c 1 2 3;
}
```

##### [6] list-separator()  函数

`list-separator()` 函数用于返回列表的分隔符类型，可以是逗号或者空格。

```scss
$lst1: a b c;
$lst2: 1,2,3;
.one{
    content: list-separator($lst1);
}
.two{
    content: list-separator($lst2);
}
---编译为
.one {
  content: space;
}
.two {
  content: comma;
}
```

##### [7]  nth()  函数

`nth()` 函数用于获取列表中指定索引的值。

```scss
$lst1: a b c;
$lst2: 1,2,3;
.one{
    content: nth($lst1, 2);
}
.two{
    content: nth($lst2, 2);
}
---编译为
.one {
  content: b;
}
.two {
  content: 2;
}
```

##### [8]  set-nth() 函数

`set-nth()` 函数用于设置列表中指定索引的值。将会覆盖原有元素的值。

```scss
.one{
    content: set-nth([a b c], 3, xkd);
}
---编译为
.one {
  content: [a b xkd];
}
```

##### [9] zip() 函数

```scss
.one{
    border:zip(1px 2px 3px,solid dashed dotted,red yellow blue);
}
---编译为
.one {
  border: 1px solid red, 2px dashed yellow, 3px dotted blue;
}
```

### 3）运算

#### （1）除法运算

- 如果需要使用变量，同时又要确保 `/` 不做除法运算而是完整地编译到 CSS 文件中，只需要用 `#{}` 插值语句将变量包裹。

```scss
p {
  $font-size: 12px;
  $line-height: 30px;
  font: #{$font-size}/#{$line-height};
}
---编译为
p {
  font: 12px/30px; 
}
```

#### （2）颜色值运算

- 颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值。

- ==需要注意的是，如果颜色值包含 alpha channel（rgba 或 hsla 两种颜色值），必须拥有相等的 alpha 值才能进行运算，因为算术运算不会作用于 alpha 值。==

  ```javascript
  p {
    color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);
  }
  
  ---编译为
  
  p {
    color: rgba(255, 255, 0, 0.75); 
  }
  ```

- 颜色值的 alpha channel 可以通过 [opacify](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#opacify-instance_method) 或 [transparentize](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#transparentize-instance_method) 两个函数进行调整。

  ```javascript
  $translucent-red: rgba(255, 0, 0, 0.5);
  p {
    color: opacify($translucent-red, 0.3);
    background-color: transparentize($translucent-red, 0.25);
  }
  
  ---编译为
  
  p {
    color: rgba(255, 0, 0, 0.8);
    background-color: rgba(255, 0, 0, 0.25); 
  }
  ```

#### （3）字符串运算

- 有引号字符串（位于 `+` 左侧）连接无引号字符串，运算结果是有引号的，相反，无引号字符串（位于 `+` 左侧）连接有引号字符串，运算结果则没有引号。

  ```scss
  p:before {
    content: "Foo " + Bar;
    font-family: sans- + "serif";
  }
  
  ---编译为
  
  p:before {
    content: "Foo Bar";
    font-family: sans-serif; 
  }
  ```

- 运算表达式与其他值连用时，用空格做连接符

  ```scss
  p {
    margin: 3px + 4px auto;
  }
  
  ---编译为
  
  p {
    margin: 7px auto; 
  }
  ```

- 在有引号的文本字符串中使用 `#{}` 插值语句可以添加动态的值：

  ```scss
  p:before {
    content: "I ate #{5 + 10} pies!";
  }
  
  ---编译为
  
  p:before {
    content: "I ate 15 pies!"; 
  }
  ```

### 4） 变量定义 `!default`

- 可以在变量的结尾添加 `!default` 给一个未通过 `!default` 声明赋值的变量赋值。

- 此时，如果变量已经被赋值，不会再被重新赋值。

  ```scss
  $content: "First content";
  $content: "Second content?" !default;
  $new_content: "First time reference" !default;
  
  #main {
    content: $content;
    new-content: $new_content;
  }
  
  ---编译为
  
  #main {
    content: "First content";
    new-content: "First time reference"; 
  }
  ```

- 如果变量还没有被赋值，则会被赋予新的值。如果变量还没有被赋值，则会被赋予新的值。

  ```scss
  $content: null;
  $content: "Non-null content" !default;
  
  #main {
    content: $content;
  }
  
  ---编译为
  
  #main {
    content: "Non-null content"; 
  }
  ```

## 5、规则 @-Rules

### 1）@import

- Sass 拓展了 `@import` 的功能，允许其导入 SCSS 或 Sass 文件。被导入的文件将合并编译到同一个 CSS 文件中，并且被导入的文件中所包含的变量或者混合指令 (mixin) 都可以在导入的文件中使用。

- Sass 允许同时导入多个文件，例如同时导入 rounded-corners 与 text-shadow 两个文件。

  ```scss
  @import "rounded-corners", "text-shadow";
  ```

#### （1）分音 (Partials)

- 如果需要导入 SCSS 或者 Sass 文件，但又不希望将其编译为 CSS，只需要在文件名前添加下划线，这样会告诉 Sass 不要编译这些文件，但导入语句中却不需要添加下划线。
  1. 命名：将文件命名为 `_colors.scss`，便不会编译 `_colours.css` 文件。
  2. 导入：```@import "colors";```
  3. ==**注意，不可以同时存在添加下划线与未添加下划线的同名文件，添加下划线的文件将会被忽略。**==

### 2）@media

- Sass 中 `@media` 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。

- 如果 `@media` 嵌套在 CSS 规则内，编译时，`@media` 将被编译到文件的最外层，包含嵌套的父选择器。

  ```javascript
  .sidebar {
    width: 300px;
    @media screen and (orientation: landscape) {
      width: 500px;
    }
  }
  
  ---编译为
  
  .sidebar {
    width: 300px; 
  }
  
  @media screen and (orientation: landscape) {
      .sidebar {
        width: 500px; 
      } 
  }
  ```

### 3）@extend

#### （1）多重延伸

- 一个选择器可以延伸多个选择器，它所包含的属性将继承所有被延伸的选择器。

- 多重延伸可以使用逗号分隔选择器名，比如 `@extend .error, .attention;` 与 `@extend .error;` `@extend.attention` 有相同的效果。

```scss
.error {
  border: 1px #f00;
  background-color: #fdd;
}
.attention {
  font-size: 3em;
  background-color: #ff0;
}
.seriousError {
  @extend .error;
  @extend .attention;
  border-width: 3px;
}
---编译为
.error, .seriousError {
  border: 1px #f00;
  background-color: #fdd; 
}
.attention, .seriousError {
  font-size: 3em;
  background-color: #ff0; 
}
.seriousError {
  border-width: 3px; 
}
```

#### （2）嵌套延伸

- 每个 `.seriousError` 选择器将包含 `.error` 的样式，而 `.criticalError` 不仅包含 `.seriousError` 的样式也会同时包含 `.error` 的所有样式。

### 4）@extend-Only 选择器

- Sass 引入了“占位符选择器”，看起来很像普通的 `id` 或 `class` 选择器，只是 `#` 或 `.` 被替换成了 `%`。可以像 class 或者 id 选择器那样使用，当它们单独使用时，不会被编译到 CSS 文件中。

### 5）@debug

- @debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug。
- 与此相似的有 @warn , @error。

## 6、控制指令

### 1）@if

- 当 `@if` 的表达式返回值不是 `false` 或者 `null` 时，条件成立，输出 `{}` 内的代码。

- `@if` 声明后面可以跟多个 `@else if` 声明，或者一个 `@else` 声明。

  ```javascript
  $type: monster;
  p {
    @if $type == ocean {
      color: blue;
    } @else if $type == matador {
      color: red;
    } @else if $type == monster {
      color: green;
    } @else {
      color: black;
    }
  }
  ```

### 2）@for

- `@for` 指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。

- 两种格式：`@for $var from <start> through <end>`，或者 `@for $var from <start> to <end>`

  - *当使用 `through` 时，条件范围包含 `<start>` 与 `<end>` 的值*。
  - *使用 `to` 时条件范围只包含 `<start>` 的值不包含 `<end>` 的值*。
  - `<start>` 和 `<end>` 必须是整数值。

  ```javascript
  @for $i from 1 through 3 {
    .item-#{$i} { width: 2em * $i; }
  }
  
  ---编译为
  
  .item-1 {
    width: 2em; }
  .item-2 {
    width: 4em; }
  .item-3 {
    width: 6em; }
  ```

### 3）@each

- 格式是 ``$var in <list>``

  ```scss
  @each $animal in puma, sea-slug, egret, salamander {
    .#{$animal}-icon {
      background-image: url('/images/#{$animal}.png');
    }
  }
  
  ---编译为
  
  .puma-icon {
    background-image: url('/images/puma.png'); }
  .sea-slug-icon {
    background-image: url('/images/sea-slug.png'); }
  .egret-icon {
    background-image: url('/images/egret.png'); }
  .salamander-icon {
    background-image: url('/images/salamander.png'); }
  ```

- ‎@each指令还可以使用多个变量，如 @each  var 1、var 2、...中‎‎。如果 ‎‎ 是列表列表，则子列表的每个元素都分配给相应的变量。

  ```javascript
  @each $animal, $color, $cursor in (puma, black, default),
                                    (sea-slug, blue, pointer) {
    .#{$animal}-icon {
      background-image: url('/images/#{$animal}.png');
      border: 2px solid $color;
      cursor: $cursor;
    }
  }
  
  ---编译为
  
  .puma-icon {
    background-image: url('/images/puma.png');
    border: 2px solid black;
    cursor: default; }
  .sea-slug-icon {
    background-image: url('/images/sea-slug.png');
    border: 2px solid blue;
    cursor: pointer; }
  ```

- 也可以使用 maps

  ```javascript
  @each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
    #{$header} {
      font-size: $size;
    }
  }
  
  ---编译为
  
  h1 {
    font-size: 2em; }
  h2 {
    font-size: 1.5em; }
  h3 {
    font-size: 1.2em; }
  ```

### 4）@while

- `@while` 指令重复输出格式直到表达式返回结果为 `false`。这样可以实现比 `@for` 更复杂的循环，只是很少会用到。

  ```scss
  $i: 6;
  @while $i > 0 {
    .item-#{$i} { width: 2em * $i; }
    $i: $i - 2;
  }
  
  ---编译为
  
  .item-6 {
    width: 12em; }
  
  .item-4 {
    width: 8em; }
  
  .item-2 {
    width: 4em; }
  ```

## 7、混合指令

- 混合指令（Mixin）用于定义可重复使用的样式

### 1）定义混合指令 `@mixin`

- 混合指令的用法是在 `@mixin` 后添加名称与样式，比如名为 `large-text` 的混合通过下面的代码定义：

  ```javascript
  @mixin large-text {
    font: {
      family: Arial;
      size: 20px;
      weight: bold;
    }
    color: #ff0000;
  }
  ```

### 2）引用混合样式 `@include`

- 使用 `@include` 指令引用混合样式，格式是在其后添加混合名称，以及需要的参数（可选）

  ```scss
  .page-title {
    @include large-text;
    padding: 4px;
    margin-top: 10px;
  }
  
  ---编译为
  
  .page-title {
    font-family: Arial;
    font-size: 20px;
    font-weight: bold;
    color: #ff0000;
    padding: 4px;
    margin-top: 10px; 
  }
  ```

### 3）参数

- 在定义混合指令的时候，按照变量的格式，通过逗号分隔，将参数写进圆括号里。引用指令时，按照参数的顺序，再将所赋的值对应写进括号。

  ```javascript
  @mixin sexy-border($color, $width) {
    border: {
      color: $color;
      width: $width;
      style: dashed;
    }
  }
  p { @include sexy-border(blue, 1in); }
  
  ---编译为
  
  p {
    border-color: blue;
    border-width: 1in;
    border-style: dashed; 
  }
  ```

- 混合指令也可以使用给变量赋值的方法给参数设定默认值

  ```scss
  @mixin sexy-border($color, $width: 1in) {
    border: {
      color: $color;
      width: $width;
      style: dashed;
    }
  }
  p { @include sexy-border(blue); }
  h1 { @include sexy-border(blue, 2in); }
  
  ---编译为
  
  p {
    border-color: blue;
    border-width: 1in;
    border-style: dashed; 
  }
  h1 {
    border-color: blue;
    border-width: 2in;
    border-style: dashed; 
  }
  ```

- 不确定参数个数时，可以使用参数变量 `…` 声明（写在参数的最后方）

  ```scss
  @mixin box-shadow($shadows...) {
    -moz-box-shadow: $shadows;
    -webkit-box-shadow: $shadows;
    box-shadow: $shadows;
  }
  .shadows {
    @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
  }
  
  ---编译为
  
  .shadowed {
    -moz-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;
    -webkit-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;
    box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;
  }
  ```

## 8、函数指令

- Sass 支持自定义函数，并能在任何属性值或 SassScript 中使用。

  ```javascript
  $grid-width: 40px;
  $gutter-width: 10px;
  
  @function grid-width($n) {
    @return $n * $grid-width + ($n - 1) * $gutter-width;
  }
  
  #sidebar { width: grid-width(5); }
  
  ---编译为
  
  #sidebar {
    width: 240px; 
  }
  ```

## 9、Readme

1. 变量可以设置默认值。
2. @import 导入文件，分音不生成 CSS 文件。
3. @extend 继承所有属性，可以使用占位符选择器减少不必要的代码。
4. @Mixin 定义可重复使用的样式，@include 调用。
   1. 指定参数名以接收参数，则参数不需要指定顺序。
   2. 参数可以设置默认值。
5. 对比 @extend 与 @Mixin
   1. 都可以实现样式复用；
   2. @extend 生成的代码量更少；

# 二、Compass

## 1、概述

- Sass本身只是一个编译器，Compass在它的基础上，封装了一系列有用的模块和模板，补充Sass的功能。它们之间的关系，有点像Javascript和jQuery。

### 1）初始化

1. 安装

   ```javascript
   npm install normallize.css --save
   npm install node-sass sass-loader --save-dev
   npm install compass-mixins --save-dev
   ```

2. 修改build/util.js

   ```javascript
   ...
   exports.cssLoaders = function (options) {
    ...
    return {
     ...
     // 将sass和scss修改为如下
     sass: generateLoaders('sass', { indentedSyntax: true, includePaths: [path.resolve(__dirname, '../node_modules/compass-mixins/lib')] }),
     scss: generateLoaders('sass', { includePaths: [path.resolve(__dirname, '../node_modules/compass-mixins/lib')] }),
     ...
    }
   }
   ...
   ```

## 2、内置模块

### 1）reset 模块

- 通常，编写自己的样式之前，有必要[重置](http://meyerweb.com/eric/tools/css/reset/)浏览器的默认样式。

  ```javascript
  　@import "compass/reset";
  ```

### 2）CSS3 模块

- 目前，[CSS3模块](http://compass-style.org/reference/compass/css3/)提供21种CSS3命令，主要处理兼容性问题。
  - [动画](http://compass-style.org/reference/compass/css3/animation/) – 指定 CSS3 动画属性及其所有子属性。
  - [外观](http://compass-style.org/reference/compass/css3/appearance/) – 指定 CSS3 外观属性。
  - [背景剪辑](http://compass-style.org/reference/compass/css3/background_clip/) – 指定所有浏览器的背景剪辑。
  - [后台源](http://compass-style.org/reference/compass/css3/background_origin/) – 指定所有浏览器的后台源。
  - [背景大小](http://compass-style.org/reference/compass/css3/background_size/) – 指定所有浏览器的背景大小。
  - [边框半径](http://compass-style.org/reference/compass/css3/border_radius/) – 指定所有浏览器的边框半径。
  - [框阴影](http://compass-style.org/reference/compass/css3/box_shadow/) – 为所有浏览器指定框阴影。
  - [框大小](http://compass-style.org/reference/compass/css3/box_sizing/) – 指定所有浏览器的框大小。
  - [列](http://compass-style.org/reference/compass/css3/columns/) – 为所有浏览器指定列式布局。
  - [筛选器](http://compass-style.org/reference/compass/css3/filter/) – 为所有浏览器指定（图像）筛选器。
  - [Flexbox](http://compass-style.org/reference/compass/css3/flexbox/) – 此模块提供与 CSS3 Flexbox 相关的混音。
  - [字体](http://compass-style.org/reference/compass/css3/font_face/) – 为所有浏览器指定可下载的字体。
  - [连字](http://compass-style.org/reference/compass/css3/hyphenation/) – Mixin 用于破坏空格并将连字符注入溢出的文本中
  - [图像](http://compass-style.org/reference/compass/css3/images/) – 为许多浏览器指定线性渐变和径向渐变。
  - [内联块](http://compass-style.org/reference/compass/css3/inline_block/) – 为所有浏览器声明元素内联块。
  - [不透明度](http://compass-style.org/reference/compass/css3/opacity/) – 指定所有浏览器的不透明度。
  - [CSS 区域](http://compass-style.org/reference/compass/css3/regions/) – 为支持的浏览器指定 CSS 区域。
  - [文本阴影](http://compass-style.org/reference/compass/css3/text-shadow/) – 指定所有浏览器的文本阴影。
  - [转换](http://compass-style.org/reference/compass/css3/transform/) – 为许多浏览器指定转换。
  - [过渡](http://compass-style.org/reference/compass/css3/transition/) – 为所有浏览器指定样式过渡。
  - [用户界面](http://compass-style.org/reference/compass/css3/user_interface/) – 为所有浏览器声明元素内联块。

### （1）圆角

```javascript
　　@import "compass/css3";

　　.rounded {
　　　　@include border-radius(5px);
　　}

---编译为

　　.rounded {
　　　　-moz-border-radius: 5px;
　　　　-webkit-border-radius: 5px;
　　　　-o-border-radius: 5px;
　　　　-ms-border-radius: 5px;
　　　　-khtml-border-radius: 5px;
　　　　border-radius: 5px;
　　}

// 如果只需要左上角为圆角，写法为
　　@include border-corner-radius(top, left, 5px);
```

### （2）透明

```javascript
　　@import "compass/css3";

　　#opacity {
　　　　@include opacity(0.5);
　　}

---编译为

　　#opacity {
　　　　filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=0.5);	// 兼容 IE
　　　　opacity: 0.5;
　　}
```

### （3）行业区块

```sass
　　@import "compass/css3";

　　#inline-block {
　　　　@include inline-block;
　　}

---编译后生成

　　#inline-block {
　　　　display: -moz-inline-stack;
　　　　display: inline-block;
　　　　vertical-align: middle;
　　　　*vertical-align: auto;
　　　　zoom: 1;
　　　　*display: inline;
　　}
```

### 3）layout模块

- 指定页面的[footer](http://compass-style.org/reference/compass/layout/sticky_footer/)部分总是出现在浏览器最底端

  ```javascript
  <body>
    <div id="root">
      <div id="root_footer"></div>
    </div>
    <div id="footer">
      Footer content goes here.
    </div>
  </body>
  
  @import "compass/layout";
  
  #footer {
  　　@include sticky-footer(54px);
  }
  ```

- 指定子元素[占满](http://compass-style.org/reference/compass/layout/stretching/)父元素的空间

  ```javascript
  　　@import "compass/layout";
  
  　　#stretch-full {
  　　　　@include stretch;
  　　}
  ```

### 4）typography模块

- [链接](http://compass-style.org/reference/compass/typography/links/) – 用于设置锚点链接样式的工具。

  - 指定[链接颜色](http://compass-style.org/reference/compass/typography/links/link_colors/)的mixin

  ```javascript
  　　link-colors($normal, $hover, $active, $visited, $focus);
  
  ---使用时写成
  
  　　@import "compass/typography";
  　　a {
  　　　　@include link-colors(#00c, #0cc, #c0c, #ccc, #cc0);
  　　}
  ```

- [列表](http://compass-style.org/reference/compass/typography/lists/) – 用于设置列表样式的工具。

- [文本](http://compass-style.org/reference/compass/typography/text/) – 文本的样式帮助程序。

- [垂直节奏](http://compass-style.org/reference/compass/typography/vertical_rhythm/) – 为您的类型创建并保持垂直节奏。

### 5）utilities模块

- [该模块](http://compass-style.org/reference/compass/utilities/)提供某些不属于其他模块的功能。

1. 清除浮动

   ```javascript
   　　import "compass/utilities/";
   
   　　.clearfix {
   　　　　@include clearfix;
   　　}
   ```

2. 表格

   ```javascript
   　　@import "compass/utilities";
   
   　　table {
   　　　　@include table-scaffolding;
   　　}
   
   ---编译后生成
   
   　　table th {
   　　　　text-align: center;
   　　　　font-weight: bold;
   　　}
   
   　　table td,
   　　table th {
   　　　　padding: 2px;
   　　}
   
   　　table td.numeric,
   　　table th.numeric {
   　　　　text-align: right;
   　　}
   ```

   









































